<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 拾光的博客</title>
    <link>http://localhost:1313/categories/java/</link>
    <description>Recent content in Java on 拾光的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Huan</copyright>
    <lastBuildDate>Thu, 14 Apr 2022 19:56:47 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java多线程之并发锁</title>
      <link>http://localhost:1313/2022/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E9%94%81/</link>
      <pubDate>Thu, 14 Apr 2022 19:56:47 +0800</pubDate>
      
      <guid>http://localhost:1313/2022/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E9%94%81/</guid>
      <description>本文先阐述 Java 中各种锁的概念。然后，介绍锁的核心实现 AQS。 互斥，即同一时刻只允许一个线程访问共享资源； 同步，即线程之间如何通信、协作。 一、并</description>
    </item>
    
    <item>
      <title>Java多线程之并发核心机制</title>
      <link>http://localhost:1313/2022/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 14 Apr 2022 19:56:25 +0800</pubDate>
      
      <guid>http://localhost:1313/2022/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6/</guid>
      <description>Java 对于并发的支持主要汇聚在 java.util.concurrent，即 J.U.C。 一、JUC 简介 Java 的 java.util.concurrent 包（简称 J.U.C）中提供了大量并发工</description>
    </item>
    
    <item>
      <title>JVM之垃圾收集(二)</title>
      <link>http://localhost:1313/2022/02/jvm%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E4%BA%8C/</link>
      <pubDate>Sat, 19 Feb 2022 01:48:30 +0800</pubDate>
      
      <guid>http://localhost:1313/2022/02/jvm%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E4%BA%8C/</guid>
      <description>本文继《垃圾收集（一）》总结垃圾收集器与内存分配与回收策略 一、垃圾收集器 以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。 注</description>
    </item>
    
    <item>
      <title>JVM之垃圾收集(一)</title>
      <link>http://localhost:1313/2022/02/jvm%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E4%B8%80/</link>
      <pubDate>Fri, 18 Feb 2022 17:58:51 +0800</pubDate>
      
      <guid>http://localhost:1313/2022/02/jvm%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E4%B8%80/</guid>
      <description>一、概述 垃圾回收主要包括三个问题： 哪些内存需要回收 什么时候回收 如何回收 前文讲述Java内存运行时区域的各个部分，其中程序计数器、虚拟机栈、本</description>
    </item>
    
    <item>
      <title>JVM之类加载机制</title>
      <link>http://localhost:1313/2021/12/jvm%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 24 Dec 2021 21:19:28 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/12/jvm%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid>
      <description>一、概述 虚拟机的类加载:指的是将类的 .class 文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 java.lang.Class 对象，用来封装类在</description>
    </item>
    
    <item>
      <title>JVM之内存模型</title>
      <link>http://localhost:1313/2021/12/jvm%E4%B9%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 11 Dec 2021 10:44:02 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/12/jvm%E4%B9%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。 一、内存简介 1.1 内核空间与用户空间 一</description>
    </item>
    
    <item>
      <title>JVM之体系结构</title>
      <link>http://localhost:1313/2021/12/jvm%E4%B9%8B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 10 Dec 2021 20:55:00 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/12/jvm%E4%B9%8B%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>一、JVM 是什么？ JVM全称Java Virtual Machine（Java虚拟机），是一个虚构出来的计算机，它屏蔽了与具体操作系统平台相关的信息，使得J</description>
    </item>
    
    <item>
      <title>String 详解</title>
      <link>http://localhost:1313/2021/09/string-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 23 Sep 2021 20:20:17 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/09/string-%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、简介 String 类型可能是 Java 中应用最频繁的引用类型，但它的性能问题却常常被忽略。高效的使用字符串，可以提升系统的整体性能。当然，要做到高效使用字符</description>
    </item>
    
    <item>
      <title>Java8 流与函数式编程</title>
      <link>http://localhost:1313/2021/07/java8-%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 21 Jul 2021 09:10:24 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/07/java8-%E6%B5%81%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>一、函数式编程 1.1 概述 目的： 为了提高效率，减少工作量，减少bug。 概念：首先需要清楚一个概念： 函数式接口；它指的是有且只有一个未实现的方法的接</description>
    </item>
    
    <item>
      <title>HashMap源码浅析(JDK1.8)</title>
      <link>http://localhost:1313/2021/06/hashmap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90jdk1.8/</link>
      <pubDate>Fri, 11 Jun 2021 09:46:27 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/06/hashmap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90jdk1.8/</guid>
      <description>1.概述 本文我们就来聊聊大家日常开发中常用的集合 ———— HashMap。HashMap 最早出现在 JDK 1.2中，底层基于散列算法实现。 HashMap 允许 null 键</description>
    </item>
    
    <item>
      <title>线程的属性、状态、生命周期详解</title>
      <link>http://localhost:1313/2021/05/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E7%8A%B6%E6%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 21 May 2021 16:02:46 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/05/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E7%8A%B6%E6%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、线程简介 线程 （英语：thread）是操作系统能够进行运算调度的最小单位。 大部分情况下，它被包含在进程之中，是进程中的实际运作单位。 一条线</description>
    </item>
    
    <item>
      <title>Collection初了解</title>
      <link>http://localhost:1313/2021/05/collection%E5%88%9D%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Sat, 08 May 2021 21:56:46 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/05/collection%E5%88%9D%E4%BA%86%E8%A7%A3/</guid>
      <description>前言：Collection 是最基本的集合接口，在 JDK 1.2 版本被引入到 Java 的世界中来。Collection 的出现，使得 Java 拥有了前所未有的强大能力。本</description>
    </item>
    
    <item>
      <title>Maven与包管理的浅解</title>
      <link>http://localhost:1313/2021/05/maven%E4%B8%8E%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E6%B5%85%E8%A7%A3/</link>
      <pubDate>Sat, 08 May 2021 19:10:26 +0800</pubDate>
      
      <guid>http://localhost:1313/2021/05/maven%E4%B8%8E%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E6%B5%85%E8%A7%A3/</guid>
      <description>一、maven是什么 1.Maven 翻译为&amp;quot;专家&amp;quot;、&amp;ldquo;内行&amp;rdquo;，是 Apache 下的一个纯 Java 开发的开源项目。 Maven 是一个项目管理</description>
    </item>
    
  </channel>
</rss>
